@page "/{gameType}/lobby/{PlayerID:guid}"
@using Chess
@using Chess_Final.Generics
@using Chess_Final.Player
@using Chess_Final.Lobby
@using Chess_Final.PlayerManager
@inject NavigationManager Nav
<link rel="stylesheet" href="Lobby.css">
<link rel="stylesheet" href="Generic.css">

<PageTitle>Triple C</PageTitle>
<div class="LobbyHeader">
    <div class="BackToLobbySelection" @onclick=ReturnToLobbySelection>
        <p> @("<- Lobby Selection")</p>
    </div>
    <h1>@gameType Lobby</h1>
</div>

<div class="LobbyContainer">

    <OnlinePlayers />

    <div class="LobbyCard">
        @if (Games?.Count > 0)
            @foreach (var game in Games!)
            {
                {
                    <LobbyCard GameId=@game.Key PlayerID=@PlayerID />
                }
            }
        else
        {
            <div>No Games?</div>
            <div>Create a new one</div>
        }

    </div>
</div>
<button class="createButton" @onclick=CreateNewGame>Create New Game</button>

@code
{
    [Parameter]
    public string? gameType { get; set; }
    private GameType lobbyType { get; set; }
    [Parameter]
    public Player? player { get; set; }
    [Parameter]
    public Guid PlayerID { get; set; }
    public Dictionary<Guid, Game>? Games;

    override protected void OnInitialized()
    {
        lobbyType = LobbyManager.ConvertStringToGameType(gameType);
        Games = LobbyManager.GetCurrentLobby(lobbyType);
        LobbyManager.LobbyChanged += () => InvokeAsync(StateHasChanged);
        PlayerManager.NewSignIn += () => InvokeAsync(StateHasChanged);
        Game.GameChanged += () => InvokeAsync(StateHasChanged);
    }

    override protected void OnParametersSet()
    {
        player = PlayerManager.GetPlayer(PlayerID);
    }

    void CreateNewGame()
    {
        if (player != null)
        {
            //Create a new game(GameName as type) w/ player name as playerOne
            Guid newGameID = LobbyManager.CreateGame(lobbyType, player);
            Nav.NavigateTo($"/{gameType}/lobby/Play/{newGameID}/{PlayerID}");
        }
    }

    void ReturnToLobbySelection()
    {
        Nav.NavigateTo($"/Home/{PlayerID}");
    }
}
